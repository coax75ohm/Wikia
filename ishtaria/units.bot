#!/usr/bin/perl
use strict;
use warnings;
# don't warn on empty data fields
no warnings 'uninitialized';

# MediaWiki API uses ISO 8601 time format
use DateTime::Format::ISO8601;

# use custom version of MediaWiki::Bot for older MediaWiki API
use File::Basename;
use lib dirname (__FILE__);
use MediaWiki::Bot;

# turn on autoflush and UTF-8 for logging
use IO::Handle;
autoflush STDOUT 1;
binmode STDOUT, ':utf8';

# set to nonzero to override edit history checking
my $FORCE = 0;

# Wikia login info, leave password undefined to use cookie file
my $username = "Coax75ohm";
my $password;

# timezone info
$ENV{TZ} = "America/Chicago";

# prompt for password if not defined and cookie file does not exist 
my $cookiefile = ".mediawiki-bot-" . $username . "-cookies";
if (! defined $password  && ! -e $cookiefile) {
    print "Wikia Password: ";
    # turn off echo, this only works on unix
    system('/bin/stty', '-echo');
    chomp($password = <STDIN>);
    system('/bin/stty', 'echo');
    print "\n";
}

# get starting epoch time
my $stime = time;

print "Bot start time: " . scalar(localtime($stime)) . "\n";

# initialize bot
# use unsecured connection, 'cause that's all Wikia offers
my $bot = MediaWiki::Bot->new({
    protocol   => "http",
    host       => "ishtaria.wikia.com",
    path       => "",
    operator   => $username,
    login_data => { username => $username, password => $password },
});

# check if logged in
if (! defined $bot) {
    print "Could not login to Wikia\n";
    exit;
}

# set permissions on cookie file
chmod 0600, $cookiefile if (-e $cookiefile);

# get time of last bot run if file is readable
my $lrfile = ".lastrun";
my ($lrtime, $LR);
if (-e $lrfile && open($LR, "<$lrfile")) {
    $lrtime = <$LR>;
    chomp $lrtime;
    close($LR);
} else {
    $lrtime = 0;
}

# get latest change in main namespace (0) or file uploads (6)
my @latestchange = $bot->recentchanges({ ns => '0|6', limit => 1 });

my ($lctime, $lcpage);
foreach (@latestchange) {
    $lctime = DateTime::Format::ISO8601->parse_datetime($_->{timestamp})->strftime("%s");
    $lcpage = $_->{title};
    print "Last edit time: " . scalar(localtime($lctime)) . "\n";
    print "Last edit page: " . $lcpage . "\n";
}

# abort if there have been no relevant edits since last bot run
goto DOIT if $FORCE;
if ($lcpage eq "Unit List" || $lrtime > $lctime) {
    # write starting epoch time to .lastrun
    if (open(my $LR, ">$lrfile")) {
        print $LR $stime;
        close($LR);
    }

    print "Nothing to do\n";
    print "Bot finish time: " . scalar(localtime) . "\n";
    exit;
}
DOIT:

# get list of units
my @unitlist = $bot->get_pages_in_category('Category:Units');

# remove subcategories, Grimoires and Scrolls from list of units
@unitlist = grep { ! /^Category:/ && ! /^Grimoire/ && ! /^Scroll/ } @unitlist;

# get data for each unit
my ($unit, %units);
foreach $unit (@unitlist) {
    # get page for unit
    my $wikitext = $bot->get_text($unit);
    if (defined $wikitext) {
        # add __NOWYSIWYG__ to unit page if not already present
        if ($wikitext !~ /__NOWYSIWYG__/) {
            $wikitext .= "\n__NOWYSIWYG__\n";
            print "Editing $unit\n";
            $bot->edit({
                page    => $unit,
                text    => $wikitext,
                summary => "add __NOWYSIWYG__ (bot)",
                minor   => 1,
            });
        }

        # loop over each line
        foreach (split(/\n/, $wikitext)) {
            # strip off any leading whitespace and pipe
            s/^\s*\|\s*//;

            # pull out required data fields
            if    (/^rarity\s*=\s*(\d+)/)                       { $units{$unit}{'rarity'} = $1; }
            elsif (/^type\s*=\s*(\w+)/)                         { $units{$unit}{'type'} = ucfirst $1; }
            elsif (/^element\s*=\s*(\w+)/)                      { $units{$unit}{'element'} = ucfirst $1; }
            # gender is lowercase because it's used as a class for the javascript filter
            elsif (/^gender\s*=\s*(\w+)/)                       { $units{$unit}{'gender'} = lcfirst $1; }
            elsif (/^skill 1\s*=\s*(\w[\w\s'&-]*[\w!])/)        { $units{$unit}{'skill 1'} = $1; }
            elsif (/^skill 1 type\s*=\s*(\w+)/)                 { $units{$unit}{'skill 1 type'} = ucfirst $1; }
            elsif (/^skill 1 desc\s*=\s*(\w[\w\s'&-\/]*\w)/)    { $units{$unit}{'skill 1 desc'} = $1; }
            elsif (/^skill 1 desc\+\s*=\s*(\w[\w\s'&-\/]*\w)/)  { $units{$unit}{'skill 1 desc+'} = $1; }
            elsif (/^skill 1 proc\s*=\s*(\d+)/)                 { $units{$unit}{'skill 1 proc'} = $1; }
            elsif (/^skill 2\s*=\s*(\w[\w\s'&-]*[\w!])/)        { $units{$unit}{'skill 2'} = $1; }
            elsif (/^skill 2 type\s*=\s*(\w+)/      )           { $units{$unit}{'skill 2 type'} = ucfirst $1; }
            elsif (/^skill 2 desc\s*=\s*(\w[\w\s'&-\/]*\w)/)    { $units{$unit}{'skill 2 desc'} = $1; }
            elsif (/^skill 2 desc\+\s*=\s*(\w[\w\s'&-\/]*\w)/)  { $units{$unit}{'skill 2 desc+'} = $1; }
            elsif (/^skill 2 proc\s*=\s*(\d+)/)                 { $units{$unit}{'skill 2 proc'} = $1; }
            elsif (/^ability\s*=\s*(\w[\w\s'&-]*\w)/)           { $units{$unit}{'ability'} = $1; }
            elsif (/^atk 0\s*=\s*(\d+)/)                        { $units{$unit}{'atk 0'} = $1; }
            elsif (/^atk 1\s*=\s*(\d+)/)                        { $units{$unit}{'atk 1'} = $1; }
            elsif (/^atk 2\s*=\s*(\d+)/)                        { $units{$unit}{'atk 2'} = $1; }
            elsif (/^atk 3\s*=\s*(\d+)/)                        { $units{$unit}{'atk 3'} = $1; }
            elsif (/^atk 4\s*=\s*(\d+)/)                        { $units{$unit}{'atk 4'} = $1; }
            elsif (/^hp 0\s*=\s*(\d+)/)                         { $units{$unit}{'hp 0'} = $1; }
            elsif (/^hp 1\s*=\s*(\d+)/)                         { $units{$unit}{'hp 1'} = $1; }
            elsif (/^hp 2\s*=\s*(\d+)/)                         { $units{$unit}{'hp 2'} = $1; }
            elsif (/^hp 3\s*=\s*(\d+)/)                         { $units{$unit}{'hp 3'} = $1; }
            elsif (/^hp 4\s*=\s*(\d+)/)                         { $units{$unit}{'hp 4'} = $1; }
            elsif (/^cost\s*=\s*(\d+)/)                         { $units{$unit}{'cost'} = $1; }
            elsif (/^max evo\s*=\s*(\d+)/)                      { $units{$unit}{'max evo'} = $1; }
            elsif (/^unreleased\s*=\s*(\S+)/)                   { $units{$unit}{'unreleased'} = $1; }
            elsif (/^illust\s*=\s*(\S.*\S)/)                    { $units{$unit}{'illust'} = $1; }
            elsif (/^CV\s*=\s*(\S.*\S)/)                        { $units{$unit}{'CV'} = $1; }
        }
    }
}

# create wikitext for Unit List page
my $wikitext = "{{Warning|info=This is a bot generated page. If you notice any missing or incorrect data, please edit the corresponding unit page and it will be updated here next time the bot runs.}}\n";

# make table header
$wikitext .= "{| class=\"wikitable filterable sortable center\"\n";
$wikitext .= "|-\n";
$wikitext .= "! class=\"unsortable\"| Image\n";
$wikitext .= "! class=\"unfilterable\"| Name\n";
$wikitext .= "! class=\"unsortable\"| Rarity\n";
$wikitext .= "! class=\"unsortable\"| Type\n";
$wikitext .= "! class=\"unsortable\"| Element\n";
$wikitext .= "! class=\"unsortable\"| Skill 1\n";
$wikitext .= "! class=\"unfilterable\" data-sort-type=\"number\"| Skill 1 %\n";
$wikitext .= "! class=\"unsortable\"| Skill 2\n";
$wikitext .= "! class=\"unfilterable\" data-sort-type=\"number\"| Skill 2 %\n";
$wikitext .= "! class=\"unsortable\"| Ability\n";
$wikitext .= "! class=\"unfilterable\" data-sort-type=\"number\"| Max Evo\n";
$wikitext .= "! class=\"unfilterable\" data-sort-type=\"number\"| Max ATK\n";
$wikitext .= "! class=\"unfilterable\" data-sort-type=\"number\"| Max HP\n";
$wikitext .= "! class=\"unfilterable\" data-sort-type=\"number\"| Cost\n";

# make table row for each unit
foreach $unit (@unitlist) {
    # do not include unreleased units
    next if $units{$unit}{'unreleased'};

    $wikitext .= "|-\n";

    # add image for unit if PNG file exists
    my $pageid = $bot->get_id("File:$unit.png");
    if (defined $pageid) {
        if (defined $units{$unit}{'gender'}) {
            $wikitext .= "| class=\"$units{$unit}{'gender'}\"| [[File:$unit.png|40px]]\n";
        } else {
            $wikitext .= "| [[File:$unit.png|40px]]\n";
        }
    } else {
        if (defined $units{$unit}{'gender'}) {
            $wikitext .= "| class=\"$units{$unit}{'gender'}\"| \n";
        } else {
            $wikitext .= "| \n";
        }
    }

    $wikitext .= "| class=\"left\"| [[$unit]]\n";
    $wikitext .= "| $units{$unit}{'rarity'}\n";
    $wikitext .= "| $units{$unit}{'type'}\n";
    $wikitext .= "| $units{$unit}{'element'}\n";

    # create tooltip popup if all skill 1 fields are defined
    if (defined $units{$unit}{'skill 1'} && defined $units{$unit}{'skill 1 desc'} && defined $units{$unit}{'skill 1 type'}) {
        if (defined $units{$unit}{'skill 1 desc+'}) {
            $wikitext .= "| {{UnitListSkill | type=$units{$unit}{'skill 1 type'} | name=$units{$unit}{'skill 1'} | desc=$units{$unit}{'skill 1 desc'} | desc+=$units{$unit}{'skill 1 desc+'}}}\n";
        } else {
            $wikitext .= "| {{UnitListSkill | type=$units{$unit}{'skill 1 type'} | name=$units{$unit}{'skill 1'} | desc=$units{$unit}{'skill 1 desc'}}}\n";
        }
    # add dash for 1 and 2 star units if they have no skill 1
    } elsif ($units{$unit}{'rarity'} < 3 && ! defined $units{$unit}{'skill 1 type'}) {
        $wikitext .= "| -\n";
    } else {
        $wikitext .= "| $units{$unit}{'skill 1 type'}\n";
    }

    # skill 1 proc %
    # add dash for 1 and 2 star units if they have no skill 1
    if ($units{$unit}{'rarity'} < 3 && ! defined $units{$unit}{'skill 1 type'}) {
        $wikitext .= "| -\n";
    } else {
        $wikitext .= "| $units{$unit}{'skill 1 proc'}\n";
    }

    # create tooltip popup if all skill 2 fields are defined
    if (defined $units{$unit}{'skill 2'} && defined $units{$unit}{'skill 2 desc'} && defined $units{$unit}{'skill 2 type'}) {
        if (defined $units{$unit}{'skill 2 desc+'}) {
            $wikitext .= "| {{UnitListSkill | type=$units{$unit}{'skill 2 type'} | name=$units{$unit}{'skill 2'} | desc=$units{$unit}{'skill 2 desc'} | desc+=$units{$unit}{'skill 2 desc+'}}}\n";
        } else {
            $wikitext .= "| {{UnitListSkill | type=$units{$unit}{'skill 2 type'} | name=$units{$unit}{'skill 2'} | desc=$units{$unit}{'skill 2 desc'}}}\n";
        }
    # add dash for 1 and 2 star units if they have no skill 2 (none do, but put this here anyway)
    } elsif ($units{$unit}{'rarity'} < 3 && ! defined $units{$unit}{'skill 2 type'}) {
        $wikitext .= "| -\n";
    } else {
        $wikitext .= "| $units{$unit}{'skill 2 type'}\n";
    }
    
    # skill 2 proc %
    # add dash for 1 and 2 star units if they have no skill 2 (none do, but put this here anyway)
    if ($units{$unit}{'rarity'} < 3 && ! defined $units{$unit}{'skill 2 type'}) {
        $wikitext .= "| -\n";
    } else {
        $wikitext .= "| $units{$unit}{'skill 2 proc'}\n";
    }

    # ability
    if (! defined $units{$unit}{'ability'}) {
        $wikitext .= "| -\n";
    } else {
        # stript trailing roman numerals from ability, otherwise filter list too long
        my $ability = $units{$unit}{'ability'};
        $ability =~ s/\sI+$//;
        $wikitext .= "| $ability\n";
    }

    # max evo
    $wikitext .= "| $units{$unit}{'max evo'}\n";

    # ATK
    my $atk = 'atk ' . $units{$unit}{'max evo'};
    $wikitext .= "| class=\"atk\"| $units{$unit}{$atk}\n";

    # HP
    my $hp = 'hp ' . $units{$unit}{'max evo'};
    $wikitext .= "| class=\"hp\"| $units{$unit}{$hp}\n";

    # cost
    $wikitext .= "| $units{$unit}{'cost'}\n";
}

# close table
$wikitext .= "|}\n";

# add category
$wikitext .= "\n";
$wikitext .= "[[Category:Gameplay & Mechanics]]";

# upload new Unit List page, won't do anything if the text wasn't changed (null edit)
print "Editing Unit List\n";
$bot->edit({
    page    => "Unit List",
    text    => $wikitext,
    summary => "update data (bot)",
    minor   => 0,
});

# write starting epoch time to .lastrun in case of edits during bot run
if (open(my $LR, ">$lrfile")) {
    print $LR $stime;
    close($LR);
}

# make hash of hashes for all skill desc and skill types, value is a counter
my %skills;
foreach $unit (@unitlist) {
    if (defined $units{$unit}{'skill 1 desc'} && defined $units{$unit}{'skill 1 type'}) {
        $skills{$units{$unit}{'skill 1 desc'}}{$units{$unit}{'skill 1 type'}}++;
        #print "$unit skill 1: $units{$unit}{'skill 1 type'} - $units{$unit}{'skill 1 desc'}\n"; 
    }
    if (defined $units{$unit}{'skill 2 desc'} && defined $units{$unit}{'skill 2 type'}) {
        $skills{$units{$unit}{'skill 2 desc'}}{$units{$unit}{'skill 2 type'}}++;
        #print "$unit skill 2: $units{$unit}{'skill 2 type'} - $units{$unit}{'skill 2 desc'}\n"; 
    }
}

# create subcategory pages for skill desc under skill type
#
# NOTE: a skill desc can be under more than one skill type
#       this is most likely caused by transcription error
#
# TODO: check Category:Skill_Descriptions list against hash table 
#       and delete any unused skill desc pages
my ($skilltype, $skilldesc);
foreach $skilldesc (sort keys %skills) {
    my $wikitext;
    foreach $skilltype (sort keys %{$skills{$skilldesc}}) {
        $wikitext .= "[[Category:$skilltype]]\n";    
    }
    $wikitext .= "[[Category:Skill Descriptions]]";

    my $cwikitext = $bot->get_text("Category:$skilldesc");
    if ($cwikitext ne $wikitext) {
        print "Editing Category:$skilldesc\n";
        $bot->edit({
            page    => "Category:$skilldesc",
            text    => $wikitext,
            summary => "update categories (bot)",
            minor   => 0,
        });
    }
}

# create subcategory pages for illustrators and CVs
my (%illust, %cv);
foreach $unit (@unitlist) {
    if (defined $units{$unit}{'illust'}) {
        $illust{$units{$unit}{'illust'}}++;
    }

    if (defined $units{$unit}{'CV'}) {
        $cv{$units{$unit}{'CV'}}++;
    }
}

$wikitext = "[[Category:Illustrators]]";
foreach (sort keys %illust) {
    my $pageid = $bot->get_id("Category:$_");
    if (!defined $pageid) {
        print "Editing Category:$_\n";
        $bot->edit({
            page    => "Category:$_",
            text    => $wikitext,
            summary => "update categories (bot)",
            minor   => 0,
        });
    }
}

$wikitext = "[[Category:CV]]";
foreach (sort keys %cv) {
    my $pageid = $bot->get_id("Category:$_");
    if (!defined $pageid) {
        print "Editing Category:$_\n";
        $bot->edit({
            page    => "Category:$_",
            text    => $wikitext,
            summary => "update categories (bot)",
            minor   => 0,
        });
    }
}

# done
print "Bot finish time: " . scalar(localtime) . "\n";
