#!/usr/bin/perl
use strict;
use warnings;
no warnings 'uninitialized';
use MediaWiki::Bot;

# use unsecured connection, 'cause that's all Wikia offers
my $bot = MediaWiki::Bot->new({
    protocol   => "http",
    host       => "age-of-ishtaria.wikia.com",
    path       => "",
    operator   => "coax75ohm",
    login_data => { username => "Coax75ohm", password => "XXXX" },
    debug      => 2,
});

# get list of units
my @unitlist = $bot->get_pages_in_category('Category:Units');

# remove subcategories and Grimoires
@unitlist = grep { ! /^Category:/ && ! /^Grimoire/ } @unitlist;

# get data for each unit
my ($unit, %units);
foreach $unit (@unitlist) {
    # get page for unit
    my $wikitext = $bot->get_text($unit);
    if (defined $wikitext) {
        # loop over each line
        foreach (split(/\n/, $wikitext)) {
           # strip off any leading whitespace and pipe
           s/^\s*\|\s*//;

           # pull out required data fields
           if    (/^rarity\s*=\s*(\d+)/)       { $units{$unit}{'rarity'} = $1; }
           elsif (/^type\s*=\s*(\w+)/)         { $units{$unit}{'type'} = ucfirst $1; }
           elsif (/^element\s*=\s*(\w+)/)      { $units{$unit}{'element'} = ucfirst $1; }
           elsif (/^skill 1 type\s*=\s*(\w+)/) { $units{$unit}{'skill 1 type'} = ucfirst $1; }
           elsif (/^skill 2 type\s*=\s*(\w+)/) { $units{$unit}{'skill 2 type'} = ucfirst $1; }
           elsif (/^atk 0\s*=\s*(\d+)/)        { $units{$unit}{'atk 0'} = $1; }
           elsif (/^atk 1\s*=\s*(\d+)/)        { $units{$unit}{'atk 1'} = $1; }
           elsif (/^atk 2\s*=\s*(\d+)/)        { $units{$unit}{'atk 2'} = $1; }
           elsif (/^hp 0\s*=\s*(\d+)/)         { $units{$unit}{'hp 0'} = $1; }
           elsif (/^hp 1\s*=\s*(\d+)/)         { $units{$unit}{'hp 1'} = $1; }
           elsif (/^hp 2\s*=\s*(\d+)/)         { $units{$unit}{'hp 2'} = $1; }
           elsif (/^cost\s*=\s*(\d+)/)         { $units{$unit}{'cost'} = $1; }
        }
    }
}

# create wikitext for Unit_List page
my $wikitext = "{{Warning|info=This is a bot generated page. If you notice any missing or incorrect data, please edit the corresponding unit page and it will be updated here next time the bot runs.}}\n";
$wikitext .= "\n";
$wikitext .= "Note: To do secondary sorting use shift+click.\n";
$wikitext .= "\n";

# make table header
$wikitext .= "{| class=\"wikitable sortable\"\n";
$wikitext .= "|-\n";
$wikitext .= "! class=\"unsortable\"|Image\n";
$wikitext .= "! Name\n";
$wikitext .= "! Rarity\n";
$wikitext .= "! Type\n";
$wikitext .= "! Element\n";
$wikitext .= "! Skill 1\n";
$wikitext .= "! Skill 2\n";
$wikitext .= "! ATK\n";
$wikitext .= "! ATK +1\n";
$wikitext .= "! ATK +2\n";
$wikitext .= "! HP\n";
$wikitext .= "! HP +1\n";
$wikitext .= "! HP +2\n";
$wikitext .= "! Cost\n";

# make table row for each unit
foreach $unit (@unitlist) {
    $wikitext .= "|-\n";

    # add image for unit if PNG file exists
    my $pageid = $bot->get_id("File:$unit.png");
    if (defined($pageid)) {
        $wikitext .= "| [[File:$unit.png|40px]]\n"
    } else {
        $wikitext .= "| \n";
    }

    $wikitext .= "| [[$unit]]\n";
    $wikitext .= "| $units{$unit}{'rarity'}\n";
    $wikitext .= "| $units{$unit}{'type'}\n";
    $wikitext .= "| $units{$unit}{'element'}\n";
    $wikitext .= "| $units{$unit}{'skill 1 type'}\n";
    $wikitext .= "| $units{$unit}{'skill 2 type'}\n";
    $wikitext .= "| style=\"background: #FFEEEE\"|$units{$unit}{'atk 0'}\n";
    $wikitext .= "| style=\"background: #FFEEEE\"|$units{$unit}{'atk 1'}\n";
    $wikitext .= "| style=\"background: #FFEEEE\"|$units{$unit}{'atk 2'}\n";
    $wikitext .= "| style=\"background: #EEFFEE\"|$units{$unit}{'hp 0'}\n";
    $wikitext .= "| style=\"background: #EEFFEE\"|$units{$unit}{'hp 1'}\n";
    $wikitext .= "| style=\"background: #EEFFEE\"|$units{$unit}{'hp 2'}\n";
    $wikitext .= "| $units{$unit}{'cost'}\n";
}

# close table
$wikitext .= "|}\n";

# upload new page, won't do anything if the text wasn't changed
$bot->edit({
    page    => "Unit_List",
    text    => $wikitext,
    summary => "update data",
    minor   => 0,
});
